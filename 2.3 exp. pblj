LambdaStreamExample.java :
import java.util.*;
import java.util.stream.*;
import java.util.Comparator;

public class LambdaStreamExample {

    // ---------------- Part a: Employee ----------------
    static class Employee {
        String name;
        int age;
        double salary;

        Employee(String name, int age, double salary) {
            this.name = name;
            this.age = age;
            this.salary = salary;
        }

        @Override
        public String toString() {
            return name + " (Age: " + age + ", Salary: " + salary + ")";
        }
    }

    // ---------------- Part b: Student ----------------
    static class Student {
        String name;
        double marks;

        Student(String name, double marks) {
            this.name = name;
            this.marks = marks;
        }
    }

    // ---------------- Part c: Product ----------------
    static class Product {
        String name;
        double price;
        String category;

        Product(String name, double price, String category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }

        @Override
        public String toString() {
            return name + " (Price: " + price + ")";
        }
    }

    public static void main(String[] args) {

        // ---------------- Part a: Sorting Employee ----------------
        System.out.println("----- Part A: Employees -----");
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", 30, 50000),
            new Employee("Bob", 25, 60000),
            new Employee("Charlie", 35, 55000)
        );

        // Sort by name
        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Sorted by Name: " + employees);

        // Sort by age
        employees.sort(Comparator.comparingInt(e -> e.age));
        System.out.println("Sorted by Age: " + employees);

        // Sort by salary descending
        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("Sorted by Salary Desc: " + employees);

        // ---------------- Part b: Filtering and Sorting Students ----------------
        System.out.println("\n----- Part B: Students -----");
        List<Student> students = Arrays.asList(
            new Student("David", 80),
            new Student("Eva", 70),
            new Student("Frank", 90),
            new Student("Grace", 76)
        );

        System.out.println("Students scoring >75% sorted by marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name + " (" + s.marks + "%)")
                .forEach(System.out::println);

        // ---------------- Part c: Stream Operations on Products ----------------
        System.out.println("\n----- Part C: Products -----");
        List<Product> products = Arrays.asList(
            new Product("Laptop", 800, "Electronics"),
            new Product("Smartphone", 600, "Electronics"),
            new Product("Headphones", 200, "Electronics"),
            new Product("Table", 150, "Furniture"),
            new Product("Chair", 100, "Furniture")
        );

        // Group by category
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));

        System.out.println("Products grouped by category:");
        grouped.forEach((category, list) -> System.out.println(category + " : " + list));

        // Most expensive product per category
        System.out.println("\nMost expensive product per category:");
        Map<String, Product> maxPriceProduct = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.collectingAndThen(
                                Collectors.maxBy(Comparator.comparingDouble(p -> p.price)),
                                Optional::get
                        )
                ));
        maxPriceProduct.forEach((category, product) -> System.out.println(category + " : " + product));

        // Average price of all products
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage price of all products: " + avgPrice);
    }
}


